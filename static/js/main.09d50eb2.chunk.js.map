{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","handleSetSelectedPostId","className","map","id","userId","title","type","onClick","event","BASE_URL","request","url","options","fetch","then","res","json","initialComment","name","email","body","NewCommentForm","postId","setComments","useState","comment","setComment","changeFieldValue","target","value","prevComment","useEffect","onSubmit","preventDefault","method","headers","JSON","stringify","addPostComment","prevState","placeholder","onChange","PostDetails","postDetails","postBody","comments","show","setShow","requestGetPostComments","getPostComments","newComments","handleDeletePostComments","commentId","deletePostComments","prevComments","filter","prev","length","UserSelect","userSelect","handleSetUserSelect","initialPost","createdAt","updatedAt","App","setPosts","setUserSelect","setSelectedPostId","setPostDetails","requestGetPosts","receivedFromServerPosts","requestGetUserPosts","newPosts","requestGetPostDetails","newPostsDetails","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09d50eb2.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[],\n  selectedPostId: number | null,\n  handleSetSelectedPostId: any,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  handleSetSelectedPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(({ id, userId, title }) => (\n        <li\n          key={id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>\n              [User #\n              {userId}\n              ]:\n            </b>\n            {title}\n          </div>\n          {selectedPostId === id\n            ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button active\"\n                onClick={handleSetSelectedPostId}\n              >\n                Close\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={(event) => handleSetSelectedPostId(event, id)}\n              >\n                Open\n              </button>\n            )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options: any = {}) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(res => res.json());\n};\n","import React, { useState, useEffect } from 'react';\nimport { addPostComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number,\n  setComments: any,\n}\n\nconst initialComment = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n}) => {\n  const [comment, setComment] = useState(initialComment);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    addPostComment({\n      postId,\n      ...comment,\n    })\n      .then(res => {\n        setComments((prevState: any) => [\n          ...prevState,\n          res,\n        ]);\n\n        setComment(initialComment);\n      });\n  };\n\n  const changeFieldValue = ({ target }: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = target;\n\n    setComment(prevComment => ({\n      ...prevComment,\n      [name]: value,\n    }));\n  };\n\n  useEffect(() => {\n    setComment(initialComment);\n  }, [postId]);\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={comment.name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={changeFieldValue}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={comment.email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={changeFieldValue}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment.body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={changeFieldValue}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { request } from './api';\n\nexport const getPostComments = (postId: number) => request(`/comments?postId=${postId}`);\n\nexport const deletePostComments = (commentId: number) => request(`/comments/${commentId}`, { method: 'DELETE' });\n\nexport const addPostComment = (comment: IComment) => request('/comments', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8',\n  },\n  body: JSON.stringify(comment),\n});\n","import React, { useState, useEffect } from 'react';\nimport { getPostComments, deletePostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  postDetails: Post,\n}\n\nexport const PostDetails: React.FC<Props> = ({ postDetails }) => {\n  const { id: postId, body: postBody } = postDetails;\n\n  const [comments, setComments] = useState<any[]>([]);\n  const [show, setShow] = useState(true);\n\n  const requestGetPostComments = (id: number) => {\n    getPostComments(id)\n      .then(newComments => {\n        setComments(newComments);\n      });\n  };\n\n  useEffect(() => {\n    requestGetPostComments(postId);\n  }, [postId]);\n\n  const handleSetShow = () => {\n    setShow(prev => !prev);\n  };\n\n  const handleDeletePostComments = (commentId: number) => {\n    deletePostComments(commentId)\n      .then(() => {\n        setComments((prevComments: any[]) => {\n          return prevComments.filter((comment: any) => comment.id !== commentId);\n        });\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {postBody}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleSetShow}\n        >\n          {show ? 'Hide' : 'Show'}\n          {` ${comments.length} comments`}\n        </button>\n\n        {show && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(({ id, body }) => (\n              <li\n                key={id}\n                className=\"PostDetails__list-item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => handleDeletePostComments(id)}\n                >\n                  X\n                </button>\n                <p>\n                  {body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            setComments={setComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\nimport './UserSelect.scss';\n\ninterface Props {\n  userSelect: string,\n  handleSetUserSelect: any,\n}\n\nexport const UserSelect: React.FC<Props> = ({ userSelect, handleSetUserSelect }) => (\n  <label>\n    Select a user: &nbsp;\n\n    <select\n      className=\"user-selector\"\n      value={userSelect}\n      onChange={handleSetUserSelect}\n    >\n      <option value=\"0\">All users</option>\n      <option value=\"1\">Leanne Graham</option>\n      <option value=\"2\">Ervin Howell</option>\n      <option value=\"3\">Clementine Bauch</option>\n      <option value=\"4\">Patricia Lebsack</option>\n      <option value=\"5\">Chelsey Dietrich</option>\n      <option value=\"6\">Mrs. Dennis Schulist</option>\n      <option value=\"7\">Kurtis Weissnat</option>\n      <option value=\"8\">Nicholas Runolfsdottir V</option>\n      <option value=\"9\">Glenna Reichert</option>\n      <option value=\"10\">Leanne Graham</option>\n    </select>\n  </label>\n);\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect/UserSelect';\nimport { getUserPosts, getPostDetails, getPosts } from './api/posts';\n\nconst initialPost = {\n  id: 0,\n  createdAt: '',\n  updatedAt: '',\n  userId: 0,\n  title: '',\n  body: '',\n};\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState([]);\n  const [userSelect, setUserSelect] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState<null | number>(null);\n  const [postDetails, setPostDetails] = useState(initialPost);\n\n  const requestGetPosts = () => {\n    getPosts()\n      .then(receivedFromServerPosts => {\n        setPosts(receivedFromServerPosts);\n      });\n  };\n\n  const requestGetUserPosts = (url: string) => {\n    getUserPosts(url)\n      .then(newPosts => {\n        setPosts(newPosts);\n      });\n  };\n\n  const requestGetPostDetails = (url: string) => {\n    getPostDetails(url)\n      .then(newPostsDetails => {\n        setPostDetails(newPostsDetails);\n      });\n  };\n\n  const handleSetUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    event.preventDefault();\n\n    setUserSelect(event.target.value);\n  };\n\n  const handleSetSelectedPostId = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n    postId = null,\n  ) => {\n    event.preventDefault();\n\n    setSelectedPostId(postId);\n  };\n\n  useEffect(() => {\n    if (userSelect === '0') {\n      requestGetPosts();\n    } else {\n      requestGetUserPosts(userSelect);\n    }\n  }, [userSelect]);\n\n  useEffect(() => {\n    if (selectedPostId) {\n      requestGetPostDetails(`${selectedPostId}`);\n    } else {\n      setPostDetails(initialPost);\n    }\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          userSelect={userSelect}\n          handleSetUserSelect={handleSetUserSelect}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            handleSetSelectedPostId={handleSetSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? <PostDetails postDetails={postDetails} />\n            : 'Post not selected'}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getPosts = () => request('/posts');\n\nexport const getUserPosts = (userId: string) => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = (postId: string) => request(`/posts/${postId}`);\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}